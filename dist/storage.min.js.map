{"version":3,"file":"storage.min.js","sources":["../src/storage.js"],"sourcesContent":["/**\n * Enable persistant storage using localStorage\n */\nconst storage = {\n\n  getItem: (c, state) => {\n    if (!c.store) return state;\n    // console.log('getItem:', c.store, state);\n    const s = JSON.parse(localStorage.getItem(c.store))\n    return s ? { ...state, ...s } : state;\n  },\n\n  setItem: (c, state) => {\n    if (!c.store) return state;\n\n    // if Component.syncTabs is available, also keep browser tabs in\n    // sync - syncTabs will create an event which monitors localStorage\n    // changes and re-renders the given component if it's storage changed.\n    if (!c.isNode && Component.syncTabs) {\n        window.syncTab  = window.syncTab || [];\n        if (!window.syncTab[c.uid]) Component.syncTabs(c)\n    }\n\n    localStorage.setItem(c.store, JSON.stringify(state))\n  }\n\n};\n\nexport default storage;\n"],"names":["getItem","c","state","store","s","JSON","parse","localStorage","setItem","isNode","Component","syncTabs","window","syncTab","uid","stringify"],"mappings":"8OAGgB,CAEdA,QAAS,CAACC,EAAGC,KACX,IAAKD,EAAEE,MAAO,OAAOD,EAErB,MAAME,EAAIC,KAAKC,MAAMC,aAAaP,QAAQC,EAAEE,QAC5C,OAAOC,EAAI,IAAKF,KAAUE,GAAMF,GAGlCM,QAAS,CAACP,EAAGC,KACX,IAAKD,EAAEE,MAAO,OAAOD,GAKhBD,EAAEQ,QAAUC,UAAUC,WACvBC,OAAOC,QAAWD,OAAOC,SAAW,GAC/BD,OAAOC,QAAQZ,EAAEa,MAAMJ,UAAUC,SAASV,IAGnDM,aAAaC,QAAQP,EAAEE,MAAOE,KAAKU,UAAUb"}