{"version":3,"file":"html.min.js","sources":["../src/html.js"],"sourcesContent":["/*\n * html`<div>...</div>`\n * - allows a cleaner, more powerful way to create HTML using JS Template literals:\n *   - auto joins arrays, without adding commas (so no need to keep using .join('') in your templates)\n *   - supports embedding real DOM nodes: Node Lists, HTML Collections, HTML Objects, Elements\n *   - supports embedding JS Objects as HTML attributes, CSS styles, and HTML data attributes:\n *     - `html` works out the context and converts the given object to an appropriate string\n *     - `html` ignores/strips nested child objects when converting to string\n *   - hides falsey stuff (instead of printing \"false\" [etc] in the output)\n *   - returns generated HTML as a string\n *\n * @param {Template Literal} representing a single HTML element\n * @return {String}\n */\n\nconst html = (strings, ...vals) => {\n  // create a property in which to save event attribute funcs, which we'll\n  // later attach to their elements as proper event listeners\n  html.funcs = html.funcs || [];\n  // start: loop over the template content\n  var output = strings.map((str, i) => {\n    html.i = html.i || i;\n    var v = vals[i] || '';\n    // dont ignore zeros\n    if (typeof vals[i] === 'number') v = vals[i]\n    var ctx = 'attr'\n    // workout our current \"context\" (either inside an HTML opening tag,\n    // inside a style attribute, or inside a data-* attribute)\n    if (str.match(/style=(\"|')$/i)) { //\"\n      ctx = 'style'\n    }\n    // check if dealing with a html `data-*` attribute\n    else if (str.match(/data-[a-z0-9\\-_]+=(\"|')$/i)) { //\"\n      ctx = 'dataAttr'\n    }\n\n    // check for a nested component\n    else if (typeof v === 'function' && v.uid && v.state && v.setState && v.render) {\n      ctx = 'nestedComponent'\n    }\n    // check for event attributes like `onclick=\"{someFunc}\"` etc\n    else if (typeof v === 'function'\n        && ctx === 'attr'\n        && str.match(/ on[a-z0-9]+=(\"|')$/i)) //\"\n    {\n      ctx = 'funcAttr'\n    }\n\n\n    // check for either an Element, HTML Collection, Node List, String,\n    // Object, etc):\n    // if current value to process (v) is an HTML Object of any kind,\n    // gets its outer HTML and use that\n    if (v.nodeName && ctx === 'attr') {\n      v = v.outerHTML;\n\n    } else if (ctx === 'nestedComponent' && typeof v === 'function') {\n\n      // *Important* ..We have a nested component, with its own state and\n      // render loop, but without a container.. We don't need or want it to\n      // setState and re-render, we just want it's latest \"view\", which is\n      // also much faster to get than doing a whole setState + re-render\n      str += v.view(v.state)\n      v=''\n\n    } else if (ctx === 'funcAttr' && typeof v === 'function' && !v.uid) {\n      // keep the function for later, but dont include it in output\n      if (Array.isArray(html.funcs)) html.funcs[html.i] = v;\n      // replace `onclick=\"...\" with onclick=\"${i}\" - we'll reference\n      // it later, once it's a real Element, so we can attach funcs[i] to\n      // it, as a proper event listener method\n      v='';\n      str += html.i\n    } else if (Array.isArray(v)) {\n      // if we have a Node List or HTML Collection, convert its\n      // items to strings\n      if (v[0].nodeName) v = v.map(n => `${n.outerHTML}`)\n      // now concat the array itself to string\n      v = v.join('');\n\n    } else if (typeof v === \"object\") {\n      var s = ''; // the string to build from our object (if needed)\n      if (ctx === 'dataAttr') {\n        // if object is for a data attr, add it as JSON\n        s += JSON.stringify(v).trim();\n      } else {\n        // gets the objects properties as strings,\n        // while ignoring nested objects, arrays etc\n        for (var p in v) {\n          if (p && v && v.hasOwnProperty(p) && typeof v[p] !== \"object\") {\n            // if inside a style attr, return `key: val;`\n            // if inside an HTML tag, return ` key=\"val\"`\n            if (ctx === 'style') s += `${p}:${v[p]};`;\n            if (ctx === 'attr')  s += ` ${p}=\"${v[p]}\"`;\n          }\n        }\n      }\n      // now we've built the appropriate string, set it as the value to\n      // add to our template\n      v = s\n    }\n    // fix not returning zeros (JS treats them as \"falsey\")\n    if (vals[i] === 0) v = \"0\"\n    // now we've converted `v` to a string version of whatever is was,\n    // we can return the current string, with `v` appended, and then\n    // move to next iteration\n\n    html.i += 1;\n    return str ? str + (v || '') : '';\n  }).join('');\n\n  // return the compiled HTML as a string\n  return output;\n}\n\nexport default html\n"],"names":["html","strings","vals","funcs","map","str","i","v","ctx","match","uid","state","setState","render","nodeName","outerHTML","view","Array","isArray","n","join","s","JSON","stringify","trim","p","hasOwnProperty"],"mappings":"2OAeMA,EAAO,CAACC,KAAYC,KAGxBF,EAAKG,MAAQH,EAAKG,OAAS,GAEdF,EAAQG,IAAI,CAACC,EAAKC,KAC7BN,EAAKM,EAAIN,EAAKM,GAAKA,EACnB,IAAIC,EAAIL,EAAKI,IAAM,GAEI,iBAAZJ,EAAKI,KAAiBC,EAAIL,EAAKI,IAC1C,IAAIE,EAAM,OA4BV,GAzBIH,EAAII,MAAM,iBACZD,EAAM,QAGCH,EAAII,MAAM,6BACjBD,EAAM,WAIc,mBAAND,GAAoBA,EAAEG,KAAOH,EAAEI,OAASJ,EAAEK,UAAYL,EAAEM,OACtEL,EAAM,kBAGc,mBAAND,GACD,SAARC,GACAH,EAAII,MAAM,0BAEfD,EAAM,YAQJD,EAAEO,UAAoB,SAARN,EAChBD,EAAIA,EAAEQ,eAED,GAAY,oBAARP,GAA0C,mBAAND,EAM7CF,GAAOE,EAAES,KAAKT,EAAEI,OAChBJ,EAAE,QAEG,GAAY,aAARC,GAAmC,mBAAND,GAAqBA,EAAEG,KAQxD,GAAIO,MAAMC,QAAQX,GAGnBA,EAAE,GAAGO,WAAUP,EAAIA,EAAEH,IAAIe,GAAK,GAAGA,EAAEJ,YAEvCR,EAAIA,EAAEa,KAAK,SAEN,GAAiB,iBAANb,EAAgB,CAChC,IAAIc,EAAI,GACR,GAAY,aAARb,EAEFa,GAAKC,KAAKC,UAAUhB,GAAGiB,YAIvB,IAAK,IAAIC,KAAKlB,EACRkB,GAAKlB,GAAKA,EAAEmB,eAAeD,IAAsB,iBAATlB,EAAEkB,KAGhC,UAARjB,IAAiBa,GAAK,GAAGI,KAAKlB,EAAEkB,OACxB,SAARjB,IAAiBa,GAAK,IAAII,MAAMlB,EAAEkB,QAM5ClB,EAAIc,QAhCAJ,MAAMC,QAAQlB,EAAKG,SAAQH,EAAKG,MAAMH,EAAKM,GAAKC,GAIpDA,EAAE,GACFF,GAAOL,EAAKM,EAoCd,OANgB,IAAZJ,EAAKI,KAAUC,EAAI,KAKvBP,EAAKM,GAAK,EACHD,EAAMA,GAAOE,GAAK,IAAM,KAC9Ba,KAAK"}