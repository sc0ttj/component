{"version":3,"file":"geo.min.js","sources":["../src/geo.js"],"sourcesContent":["// geo - a mapping addon\n//\n// Adapted from the following sources:\n// - https://github.com/nunobaldaia/mercatormap/\n// - https://github.com/wbrickner/NanoGeoUtil.js\n// - https://blog.cppse.nl/x-y-to-lat-lon-for-google-maps\n// - https://github.com/afar/robinson_projection\n\n\n// some helpers\nconst degToRad = Math.PI/180;\n//const radToDeg = 180/Math.PI;\nconst has = foo => typeof foo !== 'undefined';\n\n/**\n * RobinsonMap\n *\n * Ported to Javascript by Nathan Manousos (nathanm@gmail.com) for AFAR Media (http://afar.com)\n *\n * Original ActionScript Code written and owned by Chris Youderian\n * All code is licensed under the GPLv2.\n * This means that any derivate works that you create using this code must be released under the same license.\n * If you wish to use this code in a product you want to resell, you need to ask for permission.\n * Contact form available at:  www.flashworldmap.com/contactus.php\n * See original posting at:    www.flashmap.org/robinson-projection-in-as3-gpl/\n *\n * Usage:\n *\n *    map = new Robinson(map_width, map_height);\n *    const [x,y] = map.latLongToPx(lat, lng);\n */\nfunction RobinsonMap(mapWidth, mapHeight, offsetX, offsetY) {\n  // map width and height are asked for because they are what the\n  // earthRadius value relies upon. You can use either, as long as\n  // the image is sized such that width = height*1.97165551906973\n  // you can use either to do the calculation, but as of now I\n  // require both and only use width. both are used in projectToCSS.\n  this.mapWidth = mapWidth;\n  this.mapHeight = mapHeight;\n  this.earthRadius = (mapWidth/2.666269758)/2;\n\n  // offsetX, offsetY are used to offset points, this is to calibrate\n  // the points if they aren't showing up in the right place exactly\n  this.offsetX = (typeof offsetX === 'undefined') ? 0 : offsetX;\n  this.offsetY = (typeof offsetY === 'undefined') ? 0 : offsetY;\n\n  // these tables are created by robinson and are what the projection is based upon\n  this.AA = [0.8487,0.84751182,0.84479598,0.840213,0.83359314,0.8257851,0.814752,0.80006949,0.78216192,0.76060494,0.73658673,0.7086645,0.67777182,0.64475739,0.60987582,0.57134484,0.52729731,0.48562614,0.45167814];\n  this.BB = [0,0.0838426,0.1676852,0.2515278,0.3353704,0.419213,0.5030556,0.5868982,0.67182264,0.75336633,0.83518048,0.91537187,0.99339958,1.06872269,1.14066505,1.20841528,1.27035062,1.31998003,1.3523];\n};\n\nRobinsonMap.prototype.latLongToPx = function(lat,lng){\n  // returns the robinson projected point for a given lat/lng based on\n  // the earth radius value determined in the contructor\n\n  const roundToNearest = function(roundTo, value){\n    return Math.floor(value/roundTo)*roundTo;  //rounds down\n  };\n  const getSign = function(value){\n    return value < 0 ? -1 : 1;\n  };\n\n  const radian = 0.017453293; //pi/180\n\tconst lngSign = getSign(lng);\n\tconst latSign = 0-getSign(lat); // sc0ttj: needed to prepend `0-` to the value, in order to flip vertical points\n\tlng = Math.abs(lng);\n\tlat = Math.abs(lat); //all calculations positive\n  let low = roundToNearest(5, lat-0.0000000001); //want exact numbers to round down\n  low = (lat === 0) ? 0 : low; //except when at 0\n  const high = low + 5;\n\n  // indicies used for interpolation\n  const lowIndex = low/5;\n  const highIndex = high/5;\n  const ratio = (lat-low)/5;\n\n  // interpolation in one dimension\n  const adjAA = ((this.AA[highIndex]-this.AA[lowIndex])*ratio)+this.AA[lowIndex];\n\tconst adjBB = ((this.BB[highIndex]-this.BB[lowIndex])*ratio)+this.BB[lowIndex];\n\n  //create point from robinson function\n  const point = {\n    x : (adjAA * lng * radian * lngSign * this.earthRadius) + this.offsetX,\n    y : (adjBB * latSign * this.earthRadius) + this.offsetY\n  };\n\n  return [point.x, point.y];\n\n};\n\nRobinsonMap.prototype.pxToLatLong = function(x,y) {\n  return 'TODO';\n}\n\n\n/**\n * Mercator Map\n * This is an adaptation to JavaScript of the original Java utility class MercatorMap by Till Nagel.\n *\n * Creates a new MercatorMap with dimensions and bounding box to convert between geo-locations and screen coordinates.\n *\n * @param mapWidth        Horizontal dimension of this map, in pixels.\n * @param mapHeight       Vertical dimension of this map, in pixels.\n * @param topLatitude     Northern border of this map, in degrees.\n * @param bottomLatitude  Southern border of this map, in degrees.\n * @param leftLongitude   Western border of this map, in degrees.\n * @param rightLongitude  Eastern border of this map, in degrees.\n */\nfunction MercatorMap(mapWidth, mapHeight, topLatitude, bottomLatitude, leftLongitude, rightLongitude) {\n  this.mapWidth = mapWidth;\n  this.mapHeight = mapHeight;\n  this.topLatitudeRelative = this.getScreenYRelative(topLatitude);\n  this.bottomLatitudeRelative = this.getScreenYRelative(bottomLatitude);\n  this.leftLongitudeRadians = this.degToRadians(leftLongitude);\n  this.rightLongitudeRadians = this.degToRadians(rightLongitude);\n}\n\nMercatorMap.prototype.latLongToPx = function(latitudeInDegrees, longitudeInDegrees) {\n  return [this.getScreenX(longitudeInDegrees), this.getScreenY(latitudeInDegrees)];\n}\n\nMercatorMap.prototype.getScreenY = function(latitudeInDegrees) {\n  return this.mapHeight*(this.getScreenYRelative(latitudeInDegrees) - this.topLatitudeRelative)/(this.bottomLatitudeRelative - this.topLatitudeRelative);\n}\n\nMercatorMap.prototype.getScreenX = function(longitudeInDegrees) {\n  const longitudeInRadians = this.degToRadians(longitudeInDegrees);\n  return this.mapWidth*(longitudeInRadians - this.leftLongitudeRadians)/(this.rightLongitudeRadians - this.leftLongitudeRadians);\n}\n\nMercatorMap.prototype.getScreenYRelative = function(latitudeInDegrees) {\n  return Math.log(Math.tan(latitudeInDegrees/360.0*Math.PI + Math.PI/4));\n}\n\nMercatorMap.prototype.degToRadians = function(deg) {\n  return deg * degToRad;\n}\n\n/*\n * add additional methods, based on https://blog.cppse.nl/x-y-to-lat-lon-for-google-maps\n */\n\nMercatorMap.prototype.pxToLatLong = function (x, y){\n  return [ this.yToLat(y), this.xToLon(x) ];\n}\n\nMercatorMap.prototype.xToLon = function(x) {\n    return -180 + 0.0000006705522537 * x;\n}\n\nMercatorMap.prototype.yToLat = function(y) {\n    const e = 2.7182818284590452353602875;\n    const a = 268435456;\n    const b = 85445659.4471;\n    const c = 0.017453292519943;\n    return Math.asin(Math.pow(e,(2*a/b-2*y/b))/(Math.pow(e,(2*a/b-2*y/b))+1)-1/(Math.pow(e,(2*a/b-2*y/b))+1))/c;\n}\n\n\n/*\n * define more methods, used by BOTH maps, based on NanoGeoUtil.js\n */\n\nconst getDistanceInKm = function(latA, lonA, latB, lonB) {\n    // return  distance in Km between two lat longs (takes into account curvature of the earth)\n    const dLat = (latB - latA) * degToRad;\n    const dLon = (lonB - lonA) * degToRad;\n    const num = 12742 * Math.asin(Math.sqrt(0.5 - Math.cos(dLat)/2 + Math.cos(latA * degToRad) * Math.cos(latB * degToRad) * (1 - Math.cos(dLon))/2));\n    return Math.round(num * 100) / 100;\n}\n\nconst getDistanceInPx = function (latA, lonA, latB, lonB) {\n  const [x1, y1] = this.latLongToPx(latA, lonA);\n  const [x2, y2] = this.latLongToPx(latB, lonB);\n  const dx = x1 - x2;\n  const dy = y2 - y2;\n  return Math.round((Math.sqrt(dx * dx + dy * dy)) * 100) / 100;\n}\n\nconst getNearestTo = function (obj, arr) {\n  const fn = this.getDistanceInKm;\n  if (has(obj.lat) && has(obj.long)) {\n    const sortedLocations = [...arr].sort((a,b) => {\n      // get the distance between [a.lat,a.long] and [lat,long]\n      const d1 = fn(obj.lat, obj.long, a.lat, a.long)\n      // get the distance between [b.lat,b.long] and [lat,long]\n      const d2 = fn(obj.lat, obj.long, b.lat, b.long)\n      // return whichever is closest\n      return d1 - d2;\n    });\n    return sortedLocations;\n  } else {\n    throw Error ('Supply an object with \"lat\" and \"long\" properties');\n  }\n}\n\nconst kmToMiles = function(km) {\n    return km * 0.621371192;\n}\n\nconst milesToKm = function(mi) {\n    return mi * 1.609344;\n}\n\n\nconst arr = [RobinsonMap, MercatorMap];\n// add methods defined above to BOTH map prototypes\narr.forEach(map => {\n  const m = map.prototype;\n  m.getDistanceInKm  = getDistanceInKm;\n  m.getDistanceInPx  = getDistanceInPx;\n  m.getNearestTo = getNearestTo\n  m.kmToMiles    = kmToMiles;\n  m.milesToKm    = milesToKm;\n});\n\n\n/*\n * Geo() - the main function to export, returns a RobinsonMap or MercatorMap\n *\n*/\nconst Geo = function (options) {\n  const width = options.width || 300;\n  const height = options.height || 150;\n  const proj = options.projection.toLowerCase();\n  let map;\n\n  if (!options.projection || proj !== 'robinson') {\n    // from  https://newbedev.com/maximum-lat-and-long-bounds-for-the-world-google-maps-api-latlngbounds\n    const worldBounds = {\n        lat: { min: -85.05115,  max: 85.05115  },\n        lng: { min: -180, max: 180 },\n    };\n    map = new MercatorMap(\n      width,\n      height,\n      options.top || worldBounds.lat.max,\n      options.bottom || worldBounds.lat.min,\n      options.left || worldBounds.lng.min,\n      options.right || worldBounds.lng.max,\n    );\n  } else {\n    map = new RobinsonMap(\n      width,\n      height,\n      options.offsetX || 0,\n      options.offsetY || 0,\n    );\n  }\n\n  // add projection\n  map.projection = proj;\n  map.height = height;\n  map.width = width;\n  // earths radius\n  map.rKm = 6366.197723675814    // 20000/Math.PI;\n  map.rMiles = 3955.771869579042 // 20000/(1.609344*Math.PI);\n\n  return map;\n}\n\nexport default Geo;\n"],"names":["degToRad","Math","PI","has","foo","RobinsonMap","mapWidth","mapHeight","offsetX","offsetY","this","earthRadius","AA","BB","MercatorMap","topLatitude","bottomLatitude","leftLongitude","rightLongitude","topLatitudeRelative","getScreenYRelative","bottomLatitudeRelative","leftLongitudeRadians","degToRadians","rightLongitudeRadians","prototype","latLongToPx","lat","lng","getSign","value","lngSign","latSign","abs","low","roundTo","floor","lowIndex","highIndex","ratio","adjAA","adjBB","point","x","y","pxToLatLong","latitudeInDegrees","longitudeInDegrees","getScreenX","getScreenY","longitudeInRadians","log","tan","deg","yToLat","xToLon","e","a","b","asin","pow","getDistanceInKm","latA","lonA","latB","lonB","dLat","dLon","num","sqrt","cos","round","getDistanceInPx","x1","y1","x2","y2","dx","dy","getNearestTo","obj","arr","fn","long","sort","Error","kmToMiles","km","milesToKm","mi","forEach","map","m","options","width","height","proj","projection","toLowerCase","worldBounds","min","max","top","bottom","left","right","rKm","rMiles"],"mappings":"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"}