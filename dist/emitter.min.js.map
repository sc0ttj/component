{"version":3,"file":"emitter.min.js","sources":["../src/emitter.js"],"sourcesContent":["// from https://raw.githubusercontent.com/jeromeetienne/microevent.js/master/microevent.js\n\n// This is basically \"MicroEvent\", renamed to \"emitter\", with\n// some changes:\n//  - use \"on\", \"off\", \"emit\", instead of \"bind\", \"unbind\", \"trigger\"\n\n// @TODO\n//  1. update \"on\" and \"off\" methods:\n//    - support matching events via regex pattern:\n//    - \"on\":  for all matches, add fn to this._evts[match]\n//    - \"off\": for all matches, rm fn from this._evts[match]\n//  2. allow to pass data/props around in \"emit\" and \"on\"\n\n;(\"use strict\")\n\nconst emitter = {\n  on: function(ev, fn) {\n    this._evs = this._evs || {}\n    this._evs[ev] = this._evs[ev] || []\n    this._evs[ev].push(fn)\n  },\n  off: function(ev, fn) {\n    this._evs = this._evs || {}\n    if (ev in this._evs === false) return false\n    this._evs[ev].splice(this._evs[ev].indexOf(fn), 1)\n  },\n  emit: function(ev /* , args... */) {\n    this._evs = this._evs || {}\n    if (ev in this._evs === false) return false\n    for (var i = 0; i < this._evs[ev].length; i++) {\n      // the \"arguments\" variable holds the current state (see src/component.js:214)\n      this._evs[ev][i].apply(this, Array.prototype.slice.call(arguments, 1))\n    }\n  }\n}\n\nexport default emitter\n"],"names":["on","ev","fn","this","_evs","push","off","splice","indexOf","emit","i","length","apply","Array","prototype","slice","call","arguments"],"mappings":"8OAegB,CACdA,GAAI,SAASC,EAAIC,GACfC,KAAKC,KAAOD,KAAKC,MAAQ,GACzBD,KAAKC,KAAKH,GAAME,KAAKC,KAAKH,IAAO,GACjCE,KAAKC,KAAKH,GAAII,KAAKH,IAErBI,IAAK,SAASL,EAAIC,GAEhB,GADAC,KAAKC,KAAOD,KAAKC,MAAQ,GACrBH,KAAME,KAAKC,OAAS,EAAO,OAAO,EACtCD,KAAKC,KAAKH,GAAIM,OAAOJ,KAAKC,KAAKH,GAAIO,QAAQN,GAAK,IAElDO,KAAM,SAASR,GAEb,GADAE,KAAKC,KAAOD,KAAKC,MAAQ,GACrBH,KAAME,KAAKC,OAAS,EAAO,OAAO,EACtC,IAAK,IAAIM,EAAI,EAAGA,EAAIP,KAAKC,KAAKH,GAAIU,OAAQD,IAExCP,KAAKC,KAAKH,GAAIS,GAAGE,MAAMT,KAAMU,MAAMC,UAAUC,MAAMC,KAAKC,UAAW"}