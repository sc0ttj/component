!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).useAudio=t()}(this,(function(){"use strict";return function(e,t){if(!document||!window||"object"!=typeof e)return;const a=Array.isArray,o=function(){},n=window.AudioContext||window.webkitAudioContext;window.audioCtx=window.audioCtx?window.audioCtx:new n,audioCtx.createGain||(audioCtx.createGain=audioCtx.createGainNode),audioCtx.createDelay||(audioCtx.createDelay=audioCtx.createDelayNode);const s={};let i=null,u=null,r=!1;const l=["gain","panning","reverb","equalizer","lowpass","lowshelf","peaking","notch","highpass","highshelf","bandpass","allpass","compression","analyser"],c={};window.totalFiles=window.totalFiles?window.totalFiles:0,window.totalFiles+=Object.keys(e).length,window.loadedFiles=window.loadedFiles?window.loadedFiles:0;const d=(e,t)=>{c[i]=p(e),s[i]=m(t),s.settings=(e,t)=>(Object.keys(s).forEach(t=>{s[t]&&"settings"!==t&&s[t].settings&&s[t].settings(e)}),"function"==typeof t&&t(s[audioObj].state),s),f(),!0===s[i].autoplay&&s[i].play()},f=()=>{window.loadedFiles+=1,window.totalFiles===window.loadedFiles&&document.dispatchEvent(new CustomEvent("audioLoaded",{detail:s}))},p=e=>{let t=audioCtx.createBuffer(e?e.numberOfChannels:2,e?e.length:0,e?e.sampleRate:audioCtx.sampleRate);for(var a=0,o=e.numberOfChannels;a<o;++a){let o=t.getChannelData(a),n=e.getChannelData(a);o.set(n,0)}return t},m=e=>{const t={name:i,src:u,play:v,playFrom:T,pause:q,fadeIn:D,fadeOut:F,rapidFire:k,stop:P,mute:O,unmute:S,connectTo:E,onPlay:e[1].onPlay||o,onPause:e[1].onPause||o,onResume:e[1].onResume||o,onStop:e[1].onStop||o,onChange:e[1].onChange||o,input:audioCtx.createBufferSource(),output:audioCtx.destination,audioNodes:[],state:{isPlaying:!1,volume:e[1].volume||1,muted:e[1].muted||!1,autoplay:e[1].autoplay||!1,loop:e[1].loop||!1,playbackRate:e[1].playbackRate||1,startTime:e[1].startTime||0,startOffset:e[1].startOffset||0},settings:function(e,a){return Object.keys(e).forEach(a=>{-1!==l.indexOf(a)&&g(t.state[a])!==g(e[a])&&(t.state={...t.state,...e},t.audioNodes=b(t),x(t),t.state.isPlaying&&t.playFrom(audioCtx.currentTime))}),t.state={...t.state,...e},h(t),y(t),"function"==typeof a&&a(t.state),t.onChange(t.state),t}};return t.audioNodes=b(t),t},h=e=>{const t=e.state;if("object"==typeof t.randomization){const a=t.randomization;a.volume&&(t.volume=t.volume+Math.random()*a.volume),a.playbackRate&&(t.playbackRate=t.playbackRate+Math.random()*a.playbackRate),a.startOffset&&(t.startOffset=t.startOffset+1*(.01+Math.random()*a.startOffset)),a.delay&&R(e,"delay")&&(t.delay=t.delay*(.01+Math.random()*a.delay))}},y=e=>{const t=e.state;e.input.loop=t.loop,e.input.playbackRate.value=t.playbackRate,Object.keys(t).forEach(a=>{let o=R(e,"volume"===a?"gain":a);o&&!g(t[a])&&w(e,o,t[a])})},g=e=>null==e||!1===e,b=e=>{const t=[e.input],o={},n={gain:e.state.volume,...r,...e.state};return Object.keys(n).forEach(t=>{const a=n[t];if(g(a))return;o[t]=C(e,t,a);const s="gain"===t?"volume":t;e.state[s]=a,o[t]&&w(e,o[t],a)}),l.forEach(n=>{o[n]&&"equalizer"!==n?t.push(o[n]):"equalizer"===n&&a(e.eq)&&e.eq.forEach(e=>t.push(e))}),t.push(e.output),t},C=(e,t,a)=>{let o=void 0;switch(t){case"gain":case"volume":o=audioCtx.createGain();break;case"panning":o=audioCtx.createStereoPanner?audioCtx.createStereoPanner():audioCtx.createPanner();break;case"delay":o=audioCtx.createDelay();break;case"lowpass":case"highpass":case"bandpass":case"allpass":case"lowshelf":case"highshelf":case"peaking":case"notch":o=audioCtx.createBiquadFilter();break;case"equalizer":o={type:"equalizer"},e.eq=[],a.forEach((t,o)=>{const n=audioCtx.createBiquadFilter();0===o?n.type="lowpass":o===a.length-1?n.type="highpass":n.type="peaking",e.eq.push(n)});break;case"reverb":o=audioCtx.createConvolver();break;case"analyser":o=audioCtx.createAnalyser();break;case"compression":o=audioCtx.createDynamicsCompressor()}return o&&(o.type=t),o},w=(e,t,o)=>{const n=t.type,s=audioCtx.currentTime,i=e=>"number"==typeof o||"number"==typeof o[e],u=(e,a)=>t[e].setValueAtTime(a,s);switch(n){case"volume":case"gain":let n=o<=0?1e-5:o;!0===e.state.mute&&(n=1e-5),e.state.volume=n,t.gain.setValueAtTime(n,s),t.gain.value=n;break;case"panning":if(audioCtx.createStereoPanner)u("pan","number"==typeof o?o:0);else{const e=0,a=1-Math.abs(o);t.setPosition(o,e,a),t.panValue=o}e.state.panning=o;break;case"delay":u("delayTime","number"==typeof o?o:0);break;case"lowpass":case"highpass":case"bandpass":case"allpass":case"lowshelf":case"highshelf":case"peaking":case"notch":i("freq")&&t.frequency.setValueAtTime(o.freq,s),i("gain")&&t.gain.setValueAtTime(o.gain,s),i("q")&&t.Q.setValueAtTime(o.q,s);break;case"reverb":o&&(t.buffer=function(e,t,a){const o=audioCtx.sampleRate*e,n=audioCtx.createBuffer(2,o,audioCtx.sampleRate),s=n.getChannelData(0),i=n.getChannelData(1);let u;if(a)for(let e=0;e<o;e++){u=o-e;let a=Math.pow(1-u/o,t);s[u]=.5*Math.random()*a,i[u]=.5*Math.random()*a}else for(let e=0;e<o;e++){u=e;let a=Math.pow(1-u/o,t);s[e]=.5*Math.random()*a,i[e]=.5*Math.random()*a}return n}(o.duration,o.decay,o.reverse)),o||(t.buffer=null);break;case"equalizer":a(e.eq)&&o.forEach((t,a)=>{const o=e.eq[a];"number"==typeof t.freq&&(o.frequency.value=t.freq),"number"==typeof t.gain&&(o.gain.value=t.gain),"number"==typeof t.q&&(o.Q.value=t.q)});break;case"analyser":i("fftSize")&&(t.fftSize=o.fftSize),i("minDecibels")&&(t.minDecibels=o.minDecibels),i("maxDecibels")&&(t.maxDecibels=o.maxDecibels),i("smoothingTimeConstant")&&(t.smoothingTimeConstant=o.smoothingTimeConstant),e.state.visualiser=t;break;case"compression":i("threshold")&&u("threshold",o.threshold),i("knee")&&u("knee",o.knee),i("ratio")&&u("ratio",o.ratio),i("attack")&&u("attack",o.attack),i("release")&&u("release",o.release)}},v=()=>{const e=s[i],t=e.state,o=audioCtx.createBufferSource();o.buffer=p(c[i]),h(e),o.loop=t.loop,o.playbackRate.value=t.playbackRate,e.input=o,e.audioNodes=b(e),x(e),y(e),o.start||(o.start=o.noteOn),o.start(t.startTime,t.startOffset%o.buffer.duration),t.isPlaying=!0,a(e.attachedSounds)&&e.attachedSounds.forEach(e=>{e.state.isPlaying||e.playFrom(audioCtx.currentTime)}),"number"==typeof t.fadeIn&&t.fadeIn>0&&D(t.fadeIn),0===t.startOffset&&e.onPlay(t),t.startOffset>0&&e.onResume(t)},x=e=>{e.audioNodes.forEach((t,a)=>{const o=t,n=e.audioNodes[a+1],s=a>0?e.audioNodes[a-1]:null;o&&n&&o.connect&&("equalizer"===n.type?(o.connect(e.eq[0]),e.eq.forEach((t,a)=>{e.eq[a]&&e.eq[a+1]&&e.eq[a].connect(e.eq[a+1])})):s&&"equalizer"===s.type?(e.eq[e.eq.length-1].connect(o),o.connect(n)):o.connect(n))})},k=(e,t)=>{const a=e||3,o=t||200;for(let e=0;e<a;e++){const e=s[i].state.loop;s[i].state.loop=!1,setTimeout(v,o),s[i].state.loop=e}},q=()=>{s[i].state.isPlaying&&(s[i].state.startOffset=audioCtx.currentTime-s[i].state.startTime,s[i].input.stop(0),s[i].state.isPlaying=!1,s[i].onPause(s[i].state),a(s[i].attachedSounds)&&s[i].attachedSounds.forEach(e=>{e.state.isPlaying&&e.pause()}))},T=e=>{try{s[i].input.stop(0)}catch(e){}s[i].state.startOffset=e,s[i].play()},P=()=>{s[i].state.isPlaying&&(s[i].input.stop(0),s[i].state.isPlaying=!1,s[i].state.startOffset=0,s[i].onStop(s[i].state),a(s[i].attachedSounds)&&s[i].attachedSounds.forEach(e=>{e.state.isPlaying&&e.stop()}))},O=()=>{s[i].state.prevVol=s[i].state.volume,s[i].settings({volume:0,muted:!0}),a(s[i].attachedSounds)&&s[i].attachedSounds.forEach(e=>{e.state.isPlaying&&e.mute()})},S=()=>{s[i].settings({volume:s[i].state.prevVol,prevVol:void 0,muted:!1}),a(s[i].attachedSounds)&&s[i].attachedSounds.forEach(e=>{e.state.isPlaying&&e.unmute()})},E=e=>{e.attachedSounds=e.attachedSounds||[],e.attachedSounds.push(s[i]),s[i].onChange(s[i].state)},R=(e,t)=>{if(e.audioNodes)return e.audioNodes.filter(e=>e.type===t)[0]},D=function(e,t){s[i].state.isPlaying||s[i].play(),A(t||1,e)},F=function(e){A(1e-5,e)},A=function(e,t){const a=R(s[i],"gain"),o=audioCtx.currentTime,n=s[i].state;a.gain.value=n.volume,n.isPlaying&&(a.gain.setValueAtTime(n.volume,o),a.gain.exponentialRampToValueAtTime(e,o+t),n.volume=e)};return Object.entries(e).forEach(e=>{const t="object"==typeof e[1]&&"object"==typeof e[1].filters;i=e[1].name||e[0],u=e[1].src||e[1],r=t?e[1].filters:void 0,s[i]=null,c[i]=null,((e,t)=>{if(c[i])return void d(c[i]);const a=new XMLHttpRequest;a.open("GET",e),a.responseType="arraybuffer",a.onload=function(){let e=a.response;audioCtx.decodeAudioData(e,(function(e){d(e,t)}))},a.onprogress=function(t){let a=0;return t.lengthComputable&&(a=t.loaded/t.total*100),document.dispatchEvent(new CustomEvent("audioProgress",{detail:{percent:a,url:e}})),a},a.send()})(u,e)}),t&&(t.audio=s),s}}));
//# sourceMappingURL=useAudio.min.js.map
